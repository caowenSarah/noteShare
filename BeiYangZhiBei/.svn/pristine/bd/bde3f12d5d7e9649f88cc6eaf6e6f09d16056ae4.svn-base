package cn.edu.tju.dao.accountAndPermission.imp;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import cn.edu.tju.dao.accountAndPermission.AccountDao;
import cn.edu.tju.domain.Account;
import cn.edu.tju.util.Pager;

	
	
	@Repository
	
	public class AccountDaoImp implements AccountDao{
		@Autowired
		private SessionFactory sessionFactory;
		private Session getSession(){
			
			return sessionFactory.getCurrentSession();
		}
		//@Override
		public void getAccountByPage(Pager<Account> pageInfo, Map<String, Object> contitions){
			
			Session session = getSession();
			Criteria cri = session.createCriteria(Account.class);
			//处理查询条件
			if(contitions!=null){
				Set<String> keys=contitions.keySet();
				int id=-1;
				int userName=-1;
				for(String key:keys){
					if(key.equals("id")){
						id = (Integer) contitions.get(key);
					}else if(key.equals("userName")){
						
						userName=(Integer) contitions.get(key);
					}else{
						if(!contitions.get(key).equals("")){
							cri.add(Restrictions.like(key, contitions.get(key).toString(),MatchMode.ANYWHERE));
						}
					}
				}
				if(id!=-1){
					cri.add(Restrictions.eq("id", id));
				}
				if(userName!=-1){
				cri.add(Restrictions.eq("userName", userName));	
				}
				
			}
			//获取数据总条数
			Object obj = cri.setProjection(Projections.rowCount()).uniqueResult();
			int rowCount = Integer.parseInt(obj.toString());
			cri.setProjection(null);
			
			//处理排序
			if(pageInfo.getOrders() != null){
				Set<String> keys = pageInfo.getOrders().keySet();
				for(String key :keys){
					Order ord = null;
					if(pageInfo.getOrders().get(key)){
						ord = Order.asc(key);
					} else{
						ord = Order.desc(key);
					}
					if(ord != null){
						cri.addOrder(ord);
					}
				}
			}
			cri.setFirstResult((pageInfo.getPageIndex()-1)*pageInfo.getPageSize());
			cri.setMaxResults(pageInfo.getPageSize());
			
			List<Account> retList = cri.list();
			
			pageInfo.setTotalRecord(rowCount);
			pageInfo.setResults(retList);
		}
		//@Override
		public List<Account> getAccounts(){
			
			Session session = getSession();
			Criteria cri=session.createCriteria(Account.class);
			List<Account> list=cri.list();
			return list;
		}
		//@Override
		public Account getAccountById(int id){
			Session session = getSession();
			Account account =(Account) session.get(Account.class,id);
			return account;
			
		}
		//@Override
		@SuppressWarnings("unchecked")
	
		public Account getAccountByUserName(String username){
			Session session = getSession();
			Criteria cri = session.createCriteria(Account.class);
			Criterion cron = Restrictions.like("username", username,MatchMode.ANYWHERE).ignoreCase();
			cri.add(cron);
			Account acc=(Account) cri.uniqueResult();//刚才这样知识换了一种写法，不是用来解决刚才的问题的。接下来次才是
			return acc;
		}
		//@Override
		public void saveAccount(Account account) {
			Session session = getSession();
			session.save(account);
		}

		/* (non-Javadoc)
		 * @see com.founder.dao.Account#updateAccount(Account account)
		 */
		//@Override
		public void updateAccount(Account account) {
			Session session = getSession();
			session.update(account);
		}
		
		//@Override
		public void updatePwd(int accId,String newPwd){
			Session session = getSession();
			String hql = "update Account set password = ? where id = ?";
			Query q = session.createQuery(hql);
			q.setString(0, newPwd);
			q.setInteger(1, accId);
			q.executeUpdate();
		}

		/* (non-Javadoc)
		 * @see com.founder.dao.AccountDao#deleteAccount(int id)
		 */
		//@Override
		public int deleteAccountById(int id) {
			Session session = getSession();
			Account acc = new Account();
			acc.setId(id);
			session.delete(acc);
			return id;
		}
		
		/* (non-Javadoc)
		 * @see com.founder.dao.AccountDao#deleteAccountById(Account acc) 
		 */
		//@Override
		public int deleteAccount(Account acc) {
			Session session = getSession();
			session.delete(acc);
			return acc.getId();
		}

		

		
	}

