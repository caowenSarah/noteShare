	package cn.edu.tju.dao.album.imp;
	import java.util.List;
	import java.util.Map;
	import java.util.Set;
	import org.hibernate.Criteria;
	import org.hibernate.Query;
	import org.hibernate.Session;
	import org.hibernate.SessionFactory;
	import org.hibernate.criterion.Criterion;
	import org.hibernate.criterion.MatchMode;
	import org.hibernate.criterion.Order;
	import org.hibernate.criterion.Projections;
	import org.hibernate.criterion.Restrictions;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Repository;

import cn.edu.tju.dao.accountAndPermission.AccountDao;
import cn.edu.tju.dao.album.AlbumDao;
	import cn.edu.tju.domain.Album;
import cn.edu.tju.util.Pager;

		
		
		@Repository
		
		public class AlbumDaoImp implements AlbumDao{
			@Autowired
			private SessionFactory sessionFactory;
			private Session getSession(){
				
				return sessionFactory.getCurrentSession();
			}
			//@Override
			public void getAlbumByPage(Pager<Album> pageInfo, Map<String, Object> contitions){
				
				Session session = getSession();
				Criteria cri = session.createCriteria(Album.class);
				//处理查询条件
				if(contitions!=null){
					Set<String> keys=contitions.keySet();
					int id=-1;
					int userName=-1;
					for(String key:keys){
						if(key.equals("id")){
							id = (Integer) contitions.get(key);
						}else if(key.equals("userName")){
							
							userName=(Integer) contitions.get(key);
						}else{
							if(!contitions.get(key).equals("")){
								cri.add(Restrictions.like(key, contitions.get(key).toString(),MatchMode.ANYWHERE));
							}
						}
					}
					if(id!=-1){
						cri.add(Restrictions.eq("id", id));
					}
					if(userName!=-1){
					cri.add(Restrictions.eq("userName", userName));	
					}
					
				}
				//获取数据总条数
				Object obj = cri.setProjection(Projections.rowCount()).uniqueResult();
				int rowCount = Integer.parseInt(obj.toString());
				cri.setProjection(null);
				
				//处理排序
				if(pageInfo.getOrders() != null){
					Set<String> keys = pageInfo.getOrders().keySet();
					for(String key :keys){
						Order ord = null;
						if(pageInfo.getOrders().get(key)){
							ord = Order.asc(key);
						} else{
							ord = Order.desc(key);
						}
						if(ord != null){
							cri.addOrder(ord);
						}
					}
				}
				cri.setFirstResult((pageInfo.getPageIndex()-1)*pageInfo.getPageSize());
				cri.setMaxResults(pageInfo.getPageSize());
				
				List<Album> retList = cri.list();
				
				pageInfo.setTotalRecord(rowCount);
				pageInfo.setResults(retList);
			}
			//@Override
			public List<Album> getAlbums(){
				
				Session session = getSession();
				Criteria cri=session.createCriteria(Album.class);
				List<Album> list=cri.list();
				return list;
			}
			//@Override
			public Album getAlbumById(int id){
				Session session = getSession();
				Album Album =(Album) session.get(Album.class,id);
				return Album;
				
			}
			//@Override
			@SuppressWarnings("unchecked")
		
			public Album getAlbumByUserName(String username){
				Session session = getSession();
				Criteria cri = session.createCriteria(Album.class);
				Criterion cron = Restrictions.like("username", username,MatchMode.ANYWHERE).ignoreCase();
				cri.add(cron);
				Album acc=(Album) cri.uniqueResult();
				return acc;
			}
			
			public Album getAlbumByCreateUser(String createUser){
				Session session = getSession();
				Album Album =(Album) session.get(Album.class,createUser);
				return Album;
				
			}
			
			public List<Album> getAlbumBySubjects(String subjects){
				Session session = getSession();
				Criteria cri = session.createCriteria(Album.class);
				Criterion cron = Restrictions.like("subjects", subjects,MatchMode.ANYWHERE).ignoreCase();
				cri.add(cron);
				List<Album> alb= cri.list();
				return alb;
				
			}
			//@Override
			public int saveAlbum(Album Album) {
				Session session = getSession();
				session.save(Album);
				return Album.getId();
			}

			/* (non-Javadoc)
			 * @see com.founder.dao.Album#updateAlbum(Album Album)
			 */
			//@Override
			public void updateAlbum(Album Album) {
				Session session = getSession();
				session.update(Album);
			}
		

			//@Override
			public int deleteAlbumById(int id) {
				Session session = getSession();
				Album acc = new Album();
				acc.setId(id);
				session.delete(acc);
				return id;
			}
			
			/* (non-Javadoc)
			 * @see com.founder.dao.AlbumDao#deleteAlbumById(Album acc) 
			 */
			//@Override
			public int deleteAlbum(Album acc) {
				Session session = getSession();
				session.delete(acc);
				return acc.getId();
			}
			public Album getAlbumByname(String name) {
				// TODO Auto-generated method stub
				return null;
			}

			

			
		}


